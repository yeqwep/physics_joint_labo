local air_acceleration_factor = 0.8
local max_speed = 450
local gravity = -1900
local jump_takeoff_speed = 1200
-- pre-hashing ids improves performance
local msg_animation_done = hash("animation_done")

local function camera_control(self)
	msg.post(hash("/camera"), "follow", {
		target = msg.url(),
	})
	msg.post(hash("/camera"), "follow_offset", { offset = vmath.vector3(0, 250, 0) })
end

function init(self)
	msg.post(".", "acquire_input_focus")
	camera_control(self)
	-- support variable to keep track of collisions and separation
	self.correction = vmath.vector3()

	self.velocity = vmath.vector3(0, 0, 0)
	self.ground_contact = false
	self.anim = nil

	self.start_pos = go.get_position()
end

local function play_animation(self, anim)
	-- only play animations which are not already playing
	if self.anim ~= anim then
		-- tell the sprite to play the animation
		sprite.play_flipbook("#sprite", anim)
		-- remember which animation is playing
		self.anim = anim
	end
end

local function update_animations(self)
	-- make sure the player character faces the right way
	sprite.set_hflip("#sprite", self.velocity.x < 0)
	-- make sure the right animation is playing
	if self.ground_contact then
		if self.velocity.x == 0 then
			play_animation(self, hash("idle"))
		else
			play_animation(self, hash("walk"))
		end
	else
		if self.velocity.y > 0 then
			play_animation(self, hash("jump"))
		else
			play_animation(self, hash("fall"))
		end
	end
end
function update(self, dt)
-- function fixed_update(self, dt)
	-- apply gravity
	self.velocity.y = self.velocity.y + gravity * dt
	-- move player
	local pos = go.get_position()
	pos = pos + self.velocity * dt
	go.set_position(pos)
	-- update animations based on state (ground, air, move and idle)
	update_animations(self)
	-- reset volatile state
	self.correction = vmath.vector3()
	self.ground_contact = false
	self.wall_contact = false
end

local function handle_obstacle_contact(self, normal, distance)
	if distance > 0 then
		local proj = vmath.project(self.correction, normal * distance)
		if proj < 1 then
			local comp = (distance - distance * proj) * normal
			go.set_position(go.get_position() + comp)
			self.correction = self.correction + comp
		end
	end
	if math.abs(normal.x) > 0.7 then
		self.wall_contact = true
		self.velocity.x = 0
	end
	if normal.y > 0.7 then
		self.ground_contact = true
		self.velocity.y = 0
	end
	if normal.y < -0.7 then
		self.velocity.y = 0
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("trigger_response") and message.group == hash("danger") then
		if message.enter then
			go.set_position(self.start_pos)
			return
		end
	end

	if message_id == hash("contact_point_response") then
		if message.group == hash("ground") then
			handle_obstacle_contact(self, message.normal, message.distance)
		elseif message.group == hash("default") then
			-- handle_obstacle_contact(self, message.normal, message.distance)
			handle_obstacle_contact(self, message.normal/2, 0)
			local id = message.other_id
			local pos = go.get_world_position()
			local target_pos = go.get_world_position(id)
			local force = vmath.normalize(target_pos - pos) * 10000
			msg.post(id, "apply_force", { force = force, position = target_pos })
		end
	end
end

local function jump(self)
	if self.ground_contact then
		self.velocity.y = jump_takeoff_speed
		play_animation(self, hash("jump"))
		self.ground_contact = false
	end
end

local function abort_jump(self)
	if self.velocity.y > 0 then
		self.velocity.y = self.velocity.y * 0.5
	end
end

local function walk(self, direction)
	if self.ground_contact then
		self.velocity.x = max_speed * direction
	else
		self.velocity.x = max_speed * air_acceleration_factor * direction
	end
end

function on_input(self, action_id, action)
	if action_id == hash("left") then
		walk(self, -action.value)
	elseif action_id == hash("right") then
		walk(self, action.value)
	elseif action_id == hash("jump") then
		if action.pressed then
			jump(self)
		elseif action.released then
			abort_jump(self)
		end
	end
end